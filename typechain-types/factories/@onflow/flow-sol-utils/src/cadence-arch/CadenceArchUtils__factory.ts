/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  CadenceArchUtils,
  CadenceArchUtilsInterface,
} from "../../../../../@onflow/flow-sol-utils/src/cadence-arch/CadenceArchUtils";

const _abi = [
  {
    inputs: [],
    name: "cadenceArch",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60eb610051600b82828239805160001a6073146044577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063d0d250bd146038575b600080fd5b603e6052565b60405160499190609c565b60405180910390f35b6801000000000000000181565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000608882605f565b9050919050565b609681607f565b82525050565b600060208201905060af6000830184608f565b9291505056fea2646970667358221220e83412e6ce762e9ee4f7752c4573c34655d076092d06dff051963e7f868919e764736f6c634300081c0033";

type CadenceArchUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CadenceArchUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CadenceArchUtils__factory extends ContractFactory {
  constructor(...args: CadenceArchUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CadenceArchUtils & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CadenceArchUtils__factory {
    return super.connect(runner) as CadenceArchUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CadenceArchUtilsInterface {
    return new Interface(_abi) as CadenceArchUtilsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CadenceArchUtils {
    return new Contract(address, _abi, runner) as unknown as CadenceArchUtils;
  }
}
