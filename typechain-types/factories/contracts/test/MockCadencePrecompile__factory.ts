/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockCadencePrecompile,
  MockCadencePrecompileInterface,
} from "../../../contracts/test/MockCadencePrecompile";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "revertibleRandom",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setMockRandomValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506040516102083803806102088339818101604052810190602f91906074565b8060001b60008190555050609c565b600080fd5b6000819050919050565b6054816043565b8114605e57600080fd5b50565b600081519050606e81604d565b92915050565b6000602082840312156087576086603e565b5b60006093848285016061565b91505092915050565b61015d806100ab6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063705fab201461003b578063ae46f48414610059575b600080fd5b610043610075565b60405161005091906100a4565b60405180910390f35b610073600480360381019061006e91906100fa565b61007e565b005b60008054905090565b8060001b60008190555050565b6000819050919050565b61009e8161008b565b82525050565b60006020820190506100b96000830184610095565b92915050565b600080fd5b6000819050919050565b6100d7816100c4565b81146100e257600080fd5b50565b6000813590506100f4816100ce565b92915050565b6000602082840312156101105761010f6100bf565b5b600061011e848285016100e5565b9150509291505056fea2646970667358221220af23dcf97e02f7d251640318346597ee51040ba2de1dec330c16c7e241bc153f64736f6c634300081c0033";

type MockCadencePrecompileConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCadencePrecompileConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCadencePrecompile__factory extends ContractFactory {
  constructor(...args: MockCadencePrecompileConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    value: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(value, overrides || {});
  }
  override deploy(
    value: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(value, overrides || {}) as Promise<
      MockCadencePrecompile & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockCadencePrecompile__factory {
    return super.connect(runner) as MockCadencePrecompile__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCadencePrecompileInterface {
    return new Interface(_abi) as MockCadencePrecompileInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockCadencePrecompile {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockCadencePrecompile;
  }
}
