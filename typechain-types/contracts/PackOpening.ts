/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PackOpening {
  export type PackOpeningRecordStruct = {
    round: BigNumberish;
    player: AddressLike;
    tokenId: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PackOpeningRecordStructOutput = [
    round: bigint,
    player: string,
    tokenId: bigint,
    timestamp: bigint
  ] & { round: bigint; player: string; tokenId: bigint; timestamp: bigint };
}

export interface PackOpeningInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PACK_SIZE"
      | "PACK_COST"
      | "addNFTs"
      | "allPackOpenings"
      | "availableNFTs"
      | "canFulfillRequest"
      | "currentRound"
      | "getAllPackOpenings"
      | "getAvailableNFTCount"
      | "getAvailableNFTs"
      | "getContractBalance"
      | "getPackOpeningRecord"
      | "getPlayerPackOpenings"
      | "getRandomNumber"
      | "nftContract"
      | "onERC721Received"
      | "openPack"
      | "owner"
      | "packOpeningRecords"
      | "renounceOwnership"
      | "selectRandomItem"
      | "transferOwnership"
      | "withdrawFunds"
      | "withdrawNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NFTWithdrawn"
      | "NFTsAdded"
      | "OwnershipTransferred"
      | "PackOpened"
      | "RandomItemSelected"
      | "RandomNumberGenerated"
      | "RandomnessFulfilled"
      | "RandomnessRequested"
      | "RandomnessSourced"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PACK_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PACK_COST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addNFTs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allPackOpenings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canFulfillRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPackOpenings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableNFTCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPackOpeningRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPackOpenings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "openPack", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packOpeningRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectRandomItem",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PACK_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PACK_COST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPackOpenings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFulfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPackOpenings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableNFTCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPackOpeningRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPackOpenings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openPack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packOpeningRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectRandomItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
}

export namespace NFTWithdrawnEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTsAddedEvent {
  export type InputTuple = [tokenIds: BigNumberish[]];
  export type OutputTuple = [tokenIds: bigint[]];
  export interface OutputObject {
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackOpenedEvent {
  export type InputTuple = [
    round: BigNumberish,
    player: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [round: bigint, player: string, tokenId: bigint];
  export interface OutputObject {
    round: bigint;
    player: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomItemSelectedEvent {
  export type InputTuple = [item: string, index: BigNumberish];
  export type OutputTuple = [item: string, index: bigint];
  export interface OutputObject {
    item: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomNumberGeneratedEvent {
  export type InputTuple = [
    randomNumber: BigNumberish,
    min: BigNumberish,
    max: BigNumberish
  ];
  export type OutputTuple = [randomNumber: bigint, min: bigint, max: bigint];
  export interface OutputObject {
    randomNumber: bigint;
    min: bigint;
    max: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    randomResult: BigNumberish
  ];
  export type OutputTuple = [requestId: bigint, randomResult: bigint];
  export interface OutputObject {
    requestId: bigint;
    randomResult: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    flowHeight: BigNumberish,
    evmHeight: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    flowHeight: bigint,
    evmHeight: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    flowHeight: bigint;
    evmHeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessSourcedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    flowHeight: BigNumberish,
    evmHeight: BigNumberish,
    randomSource: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    flowHeight: bigint,
    evmHeight: bigint,
    randomSource: string
  ];
  export interface OutputObject {
    requestId: bigint;
    flowHeight: bigint;
    evmHeight: bigint;
    randomSource: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PackOpening extends BaseContract {
  connect(runner?: ContractRunner | null): PackOpening;
  waitForDeployment(): Promise<this>;

  interface: PackOpeningInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PACK_SIZE: TypedContractMethod<[], [bigint], "view">;

  PACK_COST: TypedContractMethod<[], [bigint], "view">;

  addNFTs: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  allPackOpenings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        round: bigint;
        player: string;
        tokenId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  availableNFTs: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  canFulfillRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [boolean],
    "view"
  >;

  currentRound: TypedContractMethod<[], [bigint], "view">;

  getAllPackOpenings: TypedContractMethod<
    [],
    [PackOpening.PackOpeningRecordStructOutput[]],
    "view"
  >;

  getAvailableNFTCount: TypedContractMethod<[], [bigint], "view">;

  getAvailableNFTs: TypedContractMethod<[], [bigint[]], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getPackOpeningRecord: TypedContractMethod<
    [round: BigNumberish],
    [PackOpening.PackOpeningRecordStructOutput],
    "view"
  >;

  getPlayerPackOpenings: TypedContractMethod<
    [player: AddressLike],
    [PackOpening.PackOpeningRecordStructOutput[]],
    "view"
  >;

  getRandomNumber: TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  openPack: TypedContractMethod<[], [bigint], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  packOpeningRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        round: bigint;
        player: string;
        tokenId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  selectRandomItem: TypedContractMethod<[items: string[]], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  withdrawNFT: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PACK_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PACK_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addNFTs"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allPackOpenings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        round: bigint;
        player: string;
        tokenId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "availableNFTs"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "canFulfillRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllPackOpenings"
  ): TypedContractMethod<
    [],
    [PackOpening.PackOpeningRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableNFTCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableNFTs"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPackOpeningRecord"
  ): TypedContractMethod<
    [round: BigNumberish],
    [PackOpening.PackOpeningRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerPackOpenings"
  ): TypedContractMethod<
    [player: AddressLike],
    [PackOpening.PackOpeningRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomNumber"
  ): TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openPack"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "packOpeningRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        round: bigint;
        player: string;
        tokenId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selectRandomItem"
  ): TypedContractMethod<[items: string[]], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNFT"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "NFTWithdrawn"
  ): TypedContractEvent<
    NFTWithdrawnEvent.InputTuple,
    NFTWithdrawnEvent.OutputTuple,
    NFTWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "NFTsAdded"
  ): TypedContractEvent<
    NFTsAddedEvent.InputTuple,
    NFTsAddedEvent.OutputTuple,
    NFTsAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PackOpened"
  ): TypedContractEvent<
    PackOpenedEvent.InputTuple,
    PackOpenedEvent.OutputTuple,
    PackOpenedEvent.OutputObject
  >;
  getEvent(
    key: "RandomItemSelected"
  ): TypedContractEvent<
    RandomItemSelectedEvent.InputTuple,
    RandomItemSelectedEvent.OutputTuple,
    RandomItemSelectedEvent.OutputObject
  >;
  getEvent(
    key: "RandomNumberGenerated"
  ): TypedContractEvent<
    RandomNumberGeneratedEvent.InputTuple,
    RandomNumberGeneratedEvent.OutputTuple,
    RandomNumberGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessFulfilled"
  ): TypedContractEvent<
    RandomnessFulfilledEvent.InputTuple,
    RandomnessFulfilledEvent.OutputTuple,
    RandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessSourced"
  ): TypedContractEvent<
    RandomnessSourcedEvent.InputTuple,
    RandomnessSourcedEvent.OutputTuple,
    RandomnessSourcedEvent.OutputObject
  >;

  filters: {
    "NFTWithdrawn(uint256)": TypedContractEvent<
      NFTWithdrawnEvent.InputTuple,
      NFTWithdrawnEvent.OutputTuple,
      NFTWithdrawnEvent.OutputObject
    >;
    NFTWithdrawn: TypedContractEvent<
      NFTWithdrawnEvent.InputTuple,
      NFTWithdrawnEvent.OutputTuple,
      NFTWithdrawnEvent.OutputObject
    >;

    "NFTsAdded(uint256[])": TypedContractEvent<
      NFTsAddedEvent.InputTuple,
      NFTsAddedEvent.OutputTuple,
      NFTsAddedEvent.OutputObject
    >;
    NFTsAdded: TypedContractEvent<
      NFTsAddedEvent.InputTuple,
      NFTsAddedEvent.OutputTuple,
      NFTsAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PackOpened(uint256,address,uint256)": TypedContractEvent<
      PackOpenedEvent.InputTuple,
      PackOpenedEvent.OutputTuple,
      PackOpenedEvent.OutputObject
    >;
    PackOpened: TypedContractEvent<
      PackOpenedEvent.InputTuple,
      PackOpenedEvent.OutputTuple,
      PackOpenedEvent.OutputObject
    >;

    "RandomItemSelected(string,uint256)": TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;
    RandomItemSelected: TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;

    "RandomNumberGenerated(uint64,uint64,uint64)": TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;
    RandomNumberGenerated: TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;

    "RandomnessFulfilled(uint256,uint64)": TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;
    RandomnessFulfilled: TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint64,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RandomnessSourced(uint256,uint64,uint256,bytes32)": TypedContractEvent<
      RandomnessSourcedEvent.InputTuple,
      RandomnessSourcedEvent.OutputTuple,
      RandomnessSourcedEvent.OutputObject
    >;
    RandomnessSourced: TypedContractEvent<
      RandomnessSourcedEvent.InputTuple,
      RandomnessSourcedEvent.OutputTuple,
      RandomnessSourcedEvent.OutputObject
    >;
  };
}
