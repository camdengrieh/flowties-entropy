/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PackOpeningInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canFulfillRequest"
      | "getRandomNumber"
      | "selectRandomItem"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RandomItemSelected"
      | "RandomNumberGenerated"
      | "RandomnessFulfilled"
      | "RandomnessRequested"
      | "RandomnessSourced"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canFulfillRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectRandomItem",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "canFulfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectRandomItem",
    data: BytesLike
  ): Result;
}

export namespace RandomItemSelectedEvent {
  export type InputTuple = [item: string, index: BigNumberish];
  export type OutputTuple = [item: string, index: bigint];
  export interface OutputObject {
    item: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomNumberGeneratedEvent {
  export type InputTuple = [
    randomNumber: BigNumberish,
    min: BigNumberish,
    max: BigNumberish
  ];
  export type OutputTuple = [randomNumber: bigint, min: bigint, max: bigint];
  export interface OutputObject {
    randomNumber: bigint;
    min: bigint;
    max: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    randomResult: BigNumberish
  ];
  export type OutputTuple = [requestId: bigint, randomResult: bigint];
  export interface OutputObject {
    requestId: bigint;
    randomResult: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    flowHeight: BigNumberish,
    evmHeight: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    flowHeight: bigint,
    evmHeight: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    flowHeight: bigint;
    evmHeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessSourcedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    flowHeight: BigNumberish,
    evmHeight: BigNumberish,
    randomSource: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    flowHeight: bigint,
    evmHeight: bigint,
    randomSource: string
  ];
  export interface OutputObject {
    requestId: bigint;
    flowHeight: bigint;
    evmHeight: bigint;
    randomSource: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PackOpening extends BaseContract {
  connect(runner?: ContractRunner | null): PackOpening;
  waitForDeployment(): Promise<this>;

  interface: PackOpeningInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canFulfillRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [boolean],
    "view"
  >;

  getRandomNumber: TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;

  selectRandomItem: TypedContractMethod<[items: string[]], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canFulfillRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRandomNumber"
  ): TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "selectRandomItem"
  ): TypedContractMethod<[items: string[]], [string], "view">;

  getEvent(
    key: "RandomItemSelected"
  ): TypedContractEvent<
    RandomItemSelectedEvent.InputTuple,
    RandomItemSelectedEvent.OutputTuple,
    RandomItemSelectedEvent.OutputObject
  >;
  getEvent(
    key: "RandomNumberGenerated"
  ): TypedContractEvent<
    RandomNumberGeneratedEvent.InputTuple,
    RandomNumberGeneratedEvent.OutputTuple,
    RandomNumberGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessFulfilled"
  ): TypedContractEvent<
    RandomnessFulfilledEvent.InputTuple,
    RandomnessFulfilledEvent.OutputTuple,
    RandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessSourced"
  ): TypedContractEvent<
    RandomnessSourcedEvent.InputTuple,
    RandomnessSourcedEvent.OutputTuple,
    RandomnessSourcedEvent.OutputObject
  >;

  filters: {
    "RandomItemSelected(string,uint256)": TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;
    RandomItemSelected: TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;

    "RandomNumberGenerated(uint64,uint64,uint64)": TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;
    RandomNumberGenerated: TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;

    "RandomnessFulfilled(uint256,uint64)": TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;
    RandomnessFulfilled: TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint64,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RandomnessSourced(uint256,uint64,uint256,bytes32)": TypedContractEvent<
      RandomnessSourcedEvent.InputTuple,
      RandomnessSourcedEvent.OutputTuple,
      RandomnessSourcedEvent.OutputObject
    >;
    RandomnessSourced: TypedContractEvent<
      RandomnessSourcedEvent.InputTuple,
      RandomnessSourcedEvent.OutputTuple,
      RandomnessSourcedEvent.OutputObject
    >;
  };
}
