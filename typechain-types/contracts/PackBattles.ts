/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PackBattles {
  export type GameStruct = {
    creator: AddressLike;
    player: AddressLike;
    isActive: boolean;
    isCompleted: boolean;
    availableNFTs: BigNumberish[];
    creatorNFTIndex: BigNumberish;
    playerNFTIndex: BigNumberish;
  };

  export type GameStructOutput = [
    creator: string,
    player: string,
    isActive: boolean,
    isCompleted: boolean,
    availableNFTs: bigint[],
    creatorNFTIndex: bigint,
    playerNFTIndex: bigint
  ] & {
    creator: string;
    player: string;
    isActive: boolean;
    isCompleted: boolean;
    availableNFTs: bigint[];
    creatorNFTIndex: bigint;
    playerNFTIndex: bigint;
  };
}

export interface PackBattlesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GAME_FEE"
      | "accumulatedFees"
      | "addNFTs"
      | "availableNFTs"
      | "canFulfillRequest"
      | "createGame"
      | "feeRecipient"
      | "gameCounter"
      | "games"
      | "getAccumulatedFees"
      | "getAvailableNFTs"
      | "getGame"
      | "getRandomNumber"
      | "getUnreservedNFTCount"
      | "joinGame"
      | "nftContract"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "reservedNFTs"
      | "setFeeRecipient"
      | "transferOwnership"
      | "withdrawFees"
      | "withdrawNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeRecipientUpdated"
      | "FeesWithdrawn"
      | "GameCompleted"
      | "GameCreated"
      | "GameJoined"
      | "OwnershipTransferred"
      | "RandomItemSelected"
      | "RandomNumberGenerated"
      | "RandomnessFulfilled"
      | "RandomnessRequested"
      | "RandomnessSourced"
  ): EventFragment;

  encodeFunctionData(functionFragment: "GAME_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accumulatedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNFTs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "availableNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canFulfillRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAccumulatedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnreservedNFTCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "GAME_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFulfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnreservedNFTCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCompletedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winner: AddressLike,
    winningTokenId: BigNumberish,
    losingTokenId: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winner: string,
    winningTokenId: bigint,
    losingTokenId: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
    winningTokenId: bigint;
    losingTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [gameId: bigint, creator: string];
  export interface OutputObject {
    gameId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameJoinedEvent {
  export type InputTuple = [gameId: BigNumberish, player: AddressLike];
  export type OutputTuple = [gameId: bigint, player: string];
  export interface OutputObject {
    gameId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomItemSelectedEvent {
  export type InputTuple = [item: string, index: BigNumberish];
  export type OutputTuple = [item: string, index: bigint];
  export interface OutputObject {
    item: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomNumberGeneratedEvent {
  export type InputTuple = [
    randomNumber: BigNumberish,
    min: BigNumberish,
    max: BigNumberish
  ];
  export type OutputTuple = [randomNumber: bigint, min: bigint, max: bigint];
  export interface OutputObject {
    randomNumber: bigint;
    min: bigint;
    max: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    randomResult: BigNumberish
  ];
  export type OutputTuple = [requestId: bigint, randomResult: bigint];
  export interface OutputObject {
    requestId: bigint;
    randomResult: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    flowHeight: BigNumberish,
    evmHeight: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    flowHeight: bigint,
    evmHeight: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    flowHeight: bigint;
    evmHeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessSourcedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    flowHeight: BigNumberish,
    evmHeight: BigNumberish,
    randomSource: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    flowHeight: bigint,
    evmHeight: bigint,
    randomSource: string
  ];
  export interface OutputObject {
    requestId: bigint;
    flowHeight: bigint;
    evmHeight: bigint;
    randomSource: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PackBattles extends BaseContract {
  connect(runner?: ContractRunner | null): PackBattles;
  waitForDeployment(): Promise<this>;

  interface: PackBattlesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GAME_FEE: TypedContractMethod<[], [bigint], "view">;

  accumulatedFees: TypedContractMethod<[], [bigint], "view">;

  addNFTs: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  availableNFTs: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  canFulfillRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [boolean],
    "view"
  >;

  createGame: TypedContractMethod<[], [bigint], "payable">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  gameCounter: TypedContractMethod<[], [bigint], "view">;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, boolean, bigint, bigint] & {
        creator: string;
        player: string;
        isActive: boolean;
        isCompleted: boolean;
        creatorNFTIndex: bigint;
        playerNFTIndex: bigint;
      }
    ],
    "view"
  >;

  getAccumulatedFees: TypedContractMethod<[], [bigint], "view">;

  getAvailableNFTs: TypedContractMethod<[], [bigint[]], "view">;

  getGame: TypedContractMethod<
    [gameId: BigNumberish],
    [PackBattles.GameStructOutput],
    "view"
  >;

  getRandomNumber: TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;

  getUnreservedNFTCount: TypedContractMethod<[], [bigint], "view">;

  joinGame: TypedContractMethod<[gameId: BigNumberish], [void], "payable">;

  nftContract: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reservedNFTs: TypedContractMethod<[], [bigint], "view">;

  setFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  withdrawNFT: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GAME_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accumulatedFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addNFTs"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "availableNFTs"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "canFulfillRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, boolean, bigint, bigint] & {
        creator: string;
        player: string;
        isActive: boolean;
        isCompleted: boolean;
        creatorNFTIndex: bigint;
        playerNFTIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccumulatedFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableNFTs"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [PackBattles.GameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomNumber"
  ): TypedContractMethod<
    [min: BigNumberish, max: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnreservedNFTCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reservedNFTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNFT"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "GameCompleted"
  ): TypedContractEvent<
    GameCompletedEvent.InputTuple,
    GameCompletedEvent.OutputTuple,
    GameCompletedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameJoined"
  ): TypedContractEvent<
    GameJoinedEvent.InputTuple,
    GameJoinedEvent.OutputTuple,
    GameJoinedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RandomItemSelected"
  ): TypedContractEvent<
    RandomItemSelectedEvent.InputTuple,
    RandomItemSelectedEvent.OutputTuple,
    RandomItemSelectedEvent.OutputObject
  >;
  getEvent(
    key: "RandomNumberGenerated"
  ): TypedContractEvent<
    RandomNumberGeneratedEvent.InputTuple,
    RandomNumberGeneratedEvent.OutputTuple,
    RandomNumberGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessFulfilled"
  ): TypedContractEvent<
    RandomnessFulfilledEvent.InputTuple,
    RandomnessFulfilledEvent.OutputTuple,
    RandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessSourced"
  ): TypedContractEvent<
    RandomnessSourcedEvent.InputTuple,
    RandomnessSourcedEvent.OutputTuple,
    RandomnessSourcedEvent.OutputObject
  >;

  filters: {
    "FeeRecipientUpdated(address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "GameCompleted(uint256,address,uint256,uint256)": TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;
    GameCompleted: TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;

    "GameCreated(uint256,address)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameJoined(uint256,address)": TypedContractEvent<
      GameJoinedEvent.InputTuple,
      GameJoinedEvent.OutputTuple,
      GameJoinedEvent.OutputObject
    >;
    GameJoined: TypedContractEvent<
      GameJoinedEvent.InputTuple,
      GameJoinedEvent.OutputTuple,
      GameJoinedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RandomItemSelected(string,uint256)": TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;
    RandomItemSelected: TypedContractEvent<
      RandomItemSelectedEvent.InputTuple,
      RandomItemSelectedEvent.OutputTuple,
      RandomItemSelectedEvent.OutputObject
    >;

    "RandomNumberGenerated(uint64,uint64,uint64)": TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;
    RandomNumberGenerated: TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;

    "RandomnessFulfilled(uint256,uint64)": TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;
    RandomnessFulfilled: TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint64,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RandomnessSourced(uint256,uint64,uint256,bytes32)": TypedContractEvent<
      RandomnessSourcedEvent.InputTuple,
      RandomnessSourcedEvent.OutputTuple,
      RandomnessSourcedEvent.OutputObject
    >;
    RandomnessSourced: TypedContractEvent<
      RandomnessSourcedEvent.InputTuple,
      RandomnessSourcedEvent.OutputTuple,
      RandomnessSourcedEvent.OutputObject
    >;
  };
}
